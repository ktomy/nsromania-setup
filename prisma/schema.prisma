generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model NSDomain {
  id                Int                   @id @default(autoincrement()) @db.UnsignedInt
  active            Int                   @default(1) @db.TinyInt
  title             String                @db.VarChar(128)
  domain            String                @unique @db.VarChar(64)
  port              Int                   @db.UnsignedInt
  dbExists          Int                   @default(0) @map("db_exists") @db.TinyInt
  apiSecret         String                @map("api_secret") @db.VarChar(32)
  enable            String                @db.VarChar(1024)
  showPlugins       String                @map("show_plugins") @db.VarChar(1024)
  mmconnectUsername String?               @map("mmconnect_username") @db.VarChar(32)
  mmconnectPassword String?               @map("mmconnect_password") @db.VarChar(32)
  mmconnectServer   String?               @default("EU") @map("mmconnect_server") @db.Char(2)
  bridgeUsername    String?               @map("bridge_username") @db.VarChar(32)
  bridgePassword    String?               @map("bridge_password") @db.VarChar(32)
  bridgeServer      String?               @default("EU") @map("bridge_server") @db.Char(2)
  created           DateTime              @default(now()) @db.Timestamp(0)
  lastUpdated       DateTime?             @default(now()) @map("last_updated") @db.Timestamp(0)
  dbPassword        String?               @map("db_password") @db.VarChar(64)
  nsversion         String?               @db.VarChar(50)
  authUserId        String?               @map("auth_user_id")
  authUser          User?                 @relation(fields: [authUserId], references: [id])
  environments      NSDomainEnvironment[]

  @@index([authUserId], map: "ns_domain_auth_user_id_fkey")
  @@map("ns_domain")
}

model NSDomainEnvironment {
  id         Int      @id @default(autoincrement())
  nsDomainId Int      @map("ns_domain_id") @db.UnsignedInt
  variable   String   @db.VarChar(128)
  value      String?  @db.VarChar(4096)
  Domain     NSDomain @relation(fields: [nsDomainId], references: [id])

  @@index([nsDomainId], map: "ns_domain_environment_ns_domain_id_fkey")
  @@map("ns_domain_environment")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  username         String?            @unique
  email            String?            @unique
  emailVerified    DateTime?          @map("email_verified")
  image            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(dbgenerated("(now(3))")) @updatedAt @map("updated_at")
  loginAllowed     Int?               @map("login_allowed") @db.TinyInt
  role             String?            @db.VarChar(16)
  accounts         Account[]
  Authenticator    Authenticator[]
  sessions         Session[]
  nsDomains        NSDomain[]
  register_request register_request[]

  @@map("auth_user")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String   @map("type")
  provider                 String   @map("provider")
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?  @map("refresh_token") @db.Text
  access_token             String?  @map("access_token") @db.Text
  expires_at               Int?     @map("expires_at")
  token_type               String?  @map("token_type")
  scope                    String?  @map("scope")
  id_token                 String?  @map("id_token") @db.Text
  session_state            String?  @map("session_state")
  refresh_token_expires_in Int?     @map("refresh_token_expires_in")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("auth_account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("auth_session")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("auth_verification_token")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int     @map("counter")
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String? @map("transports")
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("auth_authenticator")
}

model register_email_validation {
  id              Int      @id @default(autoincrement())
  email_address   String   @db.VarChar(128)
  validation_code String   @db.VarChar(16)
  sent_at         DateTime @default(dbgenerated("(now())")) @db.Timestamp(0)
}

model register_request {
  id              Int       @id @default(autoincrement())
  owner_name      String    @db.VarChar(128)
  owner_email     String    @db.VarChar(128)
  subdomain       String    @db.VarChar(32)
  api_secret      String    @db.VarChar(64)
  title           String?   @db.VarChar(128)
  data_source     String    @db.VarChar(32)
  dexcom_server   String?   @db.VarChar(2)
  dexcom_username String?   @db.VarChar(128)
  dexcom_password String?   @db.VarChar(128)
  status          String    @default("pending") @db.VarChar(16)
  requested_at    DateTime  @default(now()) @db.Timestamp(0)
  chnged_at       DateTime? @default(now()) @db.Timestamp(0)
  chnged_by       String?
  auth_user       User?     @relation(fields: [chnged_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registe_rqus_auth_user_id_fk")

  @@index([chnged_by], map: "registe_rqus_auth_user_id_fk")
}

